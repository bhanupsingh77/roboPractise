{"version":3,"sources":["components/SearchBox.js","components/RoboMaker.js","components/Robot.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","react_default","a","createElement","type","placeholder","onChange","searchFunction","RoboMaker","Fragment","searchData","className","dataOfUser","map","robot","i","name","toLowerCase","includes","key","id","src","concat","username","alt","Robot","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchAsync","asyncToGenerator","regenerator_default","mark","_callee","data","response","wrap","_context","prev","next","fetch","sent","json","setState","stop","onSearch","event","target","value","console","log","state","components_SearchBox","src_components_RoboMaker","Component","App","components_Robot","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAUeA,EARG,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,YAAY,oBAAoBC,SAAUN,EAAMO,mBCqBlEC,SAvBG,SAACR,GACf,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACAR,EAAAC,EAAAC,cAAA,mCAA2BH,EAAMU,YACjCT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACdX,EAAMY,WAAWC,IAAI,SAACC,EAAMC,GACzB,OACAD,EAAME,KAAKC,cAAcC,SAASlB,EAAMU,WAAWO,eACnDhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,CAAgBU,IAAKL,EAAMM,IAC3BnB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SACfV,EAAAC,EAAAC,cAAA,OAAKkB,IAAG,wBAAAC,OAA0BR,EAAMS,UAAYC,IAAI,mBACxDvB,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,QAAb,SAA2BG,EAAME,MACjCf,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,QAAb,aAA+BG,EAAMS,YAGnC,SCsBEE,cAnCZ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,WARaN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAjC,EAAAkC,KAQA,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAjC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,MAAM,8CADhB,cACHN,EADGG,EAAAI,KAAAJ,EAAAE,KAAA,EAEcL,EAAKQ,OAFnB,OAEHP,EAFGE,EAAAI,KAGThB,KAAKkB,SAAS,CAACnC,WAAY2B,IAHlB,wBAAAE,EAAAO,SAAAX,EAAAR,SARAH,EAkBbuB,SAAW,SAACC,GACRxB,EAAKqB,SAAS,CAACrC,WAAYwC,EAAMC,OAAOC,QACxCC,QAAQC,IAAI5B,EAAK6B,MAAM7C,aAlBvBgB,EAAK6B,MAAQ,CACT7C,WAAW,GACXE,WAAY,IAJPc,mFAeTG,KAAKI,8CAUT,OACIhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACGR,EAAAC,EAAAC,cAACqD,EAAD,CAAWjD,eAAgBsB,KAAKoB,WAChChD,EAAAC,EAAAC,cAACsD,EAAD,CAAW/C,WAAYmB,KAAK0B,MAAM7C,WAAYE,WAAYiB,KAAK0B,MAAM3C,qBA7B5D8C,aCWLC,MAXf,WACE,OACE1D,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACAR,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,eAAd,UACAV,EAAAC,EAAAC,cAACyD,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c50ae0a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div>\r\n            <input type=\"search\" placeholder=\"search robot here\" onChange={props.searchFunction}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport '../components/RoboMaker.css';\r\n\r\nconst RoboMaker = (props) =>{\r\n    return(\r\n        <React.Fragment>\r\n        <h2>Showing results for : {props.searchData}</h2>\r\n        <div className=\"wrap\">\r\n        {props.dataOfUser.map((robot,i) => {\r\n            return(\r\n            robot.name.toLowerCase().includes(props.searchData.toLowerCase()) ?\r\n            <React.Fragment key={robot.id}>\r\n            <div className=\"robot\">\r\n            <img src={`https://robohash.org/${robot.username}`} alt=\"loading robots\"/>\r\n            <p className=\"text\">Name: {robot.name}</p>\r\n            <p className=\"text\">Username: {robot.username}</p>\r\n            </div>    \r\n            </React.Fragment>\r\n            : \"\"\r\n            )\r\n        })}\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RoboMaker;\r\n\r\n","import React,{Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport RoboMaker from '../components/RoboMaker';\r\n\r\nclass Robot extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            searchData:\"\",\r\n            dataOfUser: []\r\n        }\r\n    }\r\n\r\n    fetchAsync = async function (){\r\n        const data = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const response = await data.json()\r\n        this.setState({dataOfUser: response});\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.fetchAsync();\r\n    }\r\n\r\n    onSearch = (event)=> {\r\n        this.setState({searchData: event.target.value});\r\n        console.log(this.state.searchData)\r\n    }\r\n\r\n    \r\n    render(){\r\n    return(\r\n        <>\r\n           <SearchBox searchFunction={this.onSearch}/>\r\n           <RoboMaker searchData={this.state.searchData} dataOfUser={this.state.dataOfUser}/>\r\n        </>\r\n    );\r\n    }\r\n  }\r\n\r\n\r\nexport  default Robot; \r\n","import React from 'react';\nimport './App.css';\nimport Robot from './components/Robot';\n\nfunction App() {\n  return (\n    <React.Fragment>\n    <div className=\"App\">\n      <h1 className=\"App-Heading\">ROBOTS</h1>\n      <Robot/>\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}